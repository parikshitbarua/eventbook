/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export declare namespace EventTicketNFT {
  export type EventStruct = {
    eventId: BigNumberish;
    title: string;
    description: string;
    organizer: AddressLike;
    ticketPrice: BigNumberish;
    maxTickets: BigNumberish;
    ticketsSold: BigNumberish;
    isActive: boolean;
    eventURI: string;
    createdAt: BigNumberish;
  };

  export type EventStructOutput = [
    eventId: bigint,
    title: string,
    description: string,
    organizer: string,
    ticketPrice: bigint,
    maxTickets: bigint,
    ticketsSold: bigint,
    isActive: boolean,
    eventURI: string,
    createdAt: bigint,
  ] & {
    eventId: bigint;
    title: string;
    description: string;
    organizer: string;
    ticketPrice: bigint;
    maxTickets: bigint;
    ticketsSold: bigint;
    isActive: boolean;
    eventURI: string;
    createdAt: bigint;
  };

  export type TicketStruct = {
    tokenId: BigNumberish;
    eventId: BigNumberish;
    originalBuyer: AddressLike;
    mintedAt: BigNumberish;
  };

  export type TicketStructOutput = [
    tokenId: bigint,
    eventId: bigint,
    originalBuyer: string,
    mintedAt: bigint,
  ] & {
    tokenId: bigint;
    eventId: bigint;
    originalBuyer: string;
    mintedAt: bigint;
  };
}

export interface EventTicketNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'ROYALTY_FEE'
      | 'approve'
      | 'balanceOf'
      | 'batchMintTickets'
      | 'createEvent'
      | 'deactivateEvent'
      | 'eventTickets'
      | 'events'
      | 'getAllEventIds'
      | 'getApproved'
      | 'getEvent'
      | 'getEventTickets'
      | 'getOrganizerEvents'
      | 'getRemainingTickets'
      | 'getTicket'
      | 'getTicketsOfOwner'
      | 'isApprovedForAll'
      | 'isEventAvailable'
      | 'mintTicket'
      | 'name'
      | 'organizerEvents'
      | 'owner'
      | 'ownerOf'
      | 'renounceOwnership'
      | 'royaltyInfo'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'supportsInterface'
      | 'symbol'
      | 'tickets'
      | 'tokenByIndex'
      | 'tokenOfOwnerByIndex'
      | 'tokenToEvent'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferOwnership',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Approval'
      | 'ApprovalForAll'
      | 'BatchMetadataUpdate'
      | 'EventCreated'
      | 'EventDeactivated'
      | 'MetadataUpdate'
      | 'OwnershipTransferred'
      | 'RoyaltyPaid'
      | 'TicketMinted'
      | 'Transfer',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'ROYALTY_FEE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'batchMintTickets',
    values: [BigNumberish, BigNumberish, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createEvent',
    values: [string, string, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'deactivateEvent',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'eventTickets',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'events',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllEventIds',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEvent',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEventTickets',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOrganizerEvents',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRemainingTickets',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTicket',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTicketsOfOwner',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isEventAvailable',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintTicket',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'organizerEvents',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'royaltyInfo',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [AddressLike, AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [AddressLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tickets',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenByIndex',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenToEvent',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'ROYALTY_FEE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'batchMintTickets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createEvent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deactivateEvent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'eventTickets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'events', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAllEventIds',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getApproved',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getEvent', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getEventTickets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOrganizerEvents',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRemainingTickets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getTicket', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getTicketsOfOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isEventAvailable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mintTicket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'organizerEvents',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'royaltyInfo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tickets', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tokenByIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenOfOwnerByIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenToEvent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish,
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean,
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean,
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish,
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    title: string,
    organizer: AddressLike,
    ticketPrice: BigNumberish,
    maxTickets: BigNumberish,
  ];
  export type OutputTuple = [
    eventId: bigint,
    title: string,
    organizer: string,
    ticketPrice: bigint,
    maxTickets: bigint,
  ];
  export interface OutputObject {
    eventId: bigint;
    title: string;
    organizer: string;
    ticketPrice: bigint;
    maxTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventDeactivatedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyPaidEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    organizer: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [
    tokenId: bigint,
    organizer: string,
    amount: bigint,
  ];
  export interface OutputObject {
    tokenId: bigint;
    organizer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    eventId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish,
  ];
  export type OutputTuple = [
    tokenId: bigint,
    eventId: bigint,
    buyer: string,
    price: bigint,
  ];
  export interface OutputObject {
    tokenId: bigint;
    eventId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicketNFT extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicketNFT;
  waitForDeployment(): Promise<this>;

  interface: EventTicketNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  ROYALTY_FEE: TypedContractMethod<[], [bigint], 'view'>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  batchMintTickets: TypedContractMethod<
    [_eventId: BigNumberish, _quantity: BigNumberish, _tokenURIs: string[]],
    [bigint[]],
    'payable'
  >;

  createEvent: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _maxTickets: BigNumberish,
      _eventURI: string,
    ],
    [bigint],
    'nonpayable'
  >;

  deactivateEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    'nonpayable'
  >;

  eventTickets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    'view'
  >;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
      ] & {
        eventId: bigint;
        title: string;
        description: string;
        organizer: string;
        ticketPrice: bigint;
        maxTickets: bigint;
        ticketsSold: bigint;
        isActive: boolean;
        eventURI: string;
        createdAt: bigint;
      },
    ],
    'view'
  >;

  getAllEventIds: TypedContractMethod<[], [bigint[]], 'view'>;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  getEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [EventTicketNFT.EventStructOutput],
    'view'
  >;

  getEventTickets: TypedContractMethod<
    [_eventId: BigNumberish],
    [bigint[]],
    'view'
  >;

  getOrganizerEvents: TypedContractMethod<
    [_organizer: AddressLike],
    [bigint[]],
    'view'
  >;

  getRemainingTickets: TypedContractMethod<
    [_eventId: BigNumberish],
    [bigint],
    'view'
  >;

  getTicket: TypedContractMethod<
    [_tokenId: BigNumberish],
    [EventTicketNFT.TicketStructOutput],
    'view'
  >;

  getTicketsOfOwner: TypedContractMethod<
    [_owner: AddressLike],
    [bigint[]],
    'view'
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    'view'
  >;

  isEventAvailable: TypedContractMethod<
    [_eventId: BigNumberish],
    [boolean],
    'view'
  >;

  mintTicket: TypedContractMethod<
    [_eventId: BigNumberish, _tokenURI: string],
    [bigint],
    'payable'
  >;

  name: TypedContractMethod<[], [string], 'view'>;

  organizerEvents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    'view'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  royaltyInfo: TypedContractMethod<
    [_tokenId: BigNumberish, _salePrice: BigNumberish],
    [[string, bigint]],
    'view'
  >;

  'safeTransferFrom(address,address,uint256)': TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  'safeTransferFrom(address,address,uint256,bytes)': TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    'nonpayable'
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >;

  symbol: TypedContractMethod<[], [string], 'view'>;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        tokenId: bigint;
        eventId: bigint;
        originalBuyer: string;
        mintedAt: bigint;
      },
    ],
    'view'
  >;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], 'view'>;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    'view'
  >;

  tokenToEvent: TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'ROYALTY_FEE',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'balanceOf',
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'batchMintTickets',
  ): TypedContractMethod<
    [_eventId: BigNumberish, _quantity: BigNumberish, _tokenURIs: string[]],
    [bigint[]],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'createEvent',
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _maxTickets: BigNumberish,
      _eventURI: string,
    ],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deactivateEvent',
  ): TypedContractMethod<[_eventId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'eventTickets',
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(nameOrSignature: 'events'): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
      ] & {
        eventId: bigint;
        title: string;
        description: string;
        organizer: string;
        ticketPrice: bigint;
        maxTickets: bigint;
        ticketsSold: bigint;
        isActive: boolean;
        eventURI: string;
        createdAt: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAllEventIds',
  ): TypedContractMethod<[], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'getApproved',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getEvent',
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [EventTicketNFT.EventStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getEventTickets',
  ): TypedContractMethod<[_eventId: BigNumberish], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'getOrganizerEvents',
  ): TypedContractMethod<[_organizer: AddressLike], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'getRemainingTickets',
  ): TypedContractMethod<[_eventId: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getTicket',
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [EventTicketNFT.TicketStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getTicketsOfOwner',
  ): TypedContractMethod<[_owner: AddressLike], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'isApprovedForAll',
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isEventAvailable',
  ): TypedContractMethod<[_eventId: BigNumberish], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'mintTicket',
  ): TypedContractMethod<
    [_eventId: BigNumberish, _tokenURI: string],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'name',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'organizerEvents',
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'ownerOf',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'royaltyInfo',
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _salePrice: BigNumberish],
    [[string, bigint]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256)',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)',
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setApprovalForAll',
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'symbol',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'tickets'): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        tokenId: bigint;
        eventId: bigint;
        originalBuyer: string;
        mintedAt: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'tokenByIndex',
  ): TypedContractMethod<[index: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'tokenOfOwnerByIndex',
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'tokenToEvent',
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'tokenURI',
  ): TypedContractMethod<[tokenId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'Approval',
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'ApprovalForAll',
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: 'BatchMetadataUpdate',
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: 'EventCreated',
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: 'EventDeactivated',
  ): TypedContractEvent<
    EventDeactivatedEvent.InputTuple,
    EventDeactivatedEvent.OutputTuple,
    EventDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: 'MetadataUpdate',
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'RoyaltyPaid',
  ): TypedContractEvent<
    RoyaltyPaidEvent.InputTuple,
    RoyaltyPaidEvent.OutputTuple,
    RoyaltyPaidEvent.OutputObject
  >;
  getEvent(
    key: 'TicketMinted',
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'ApprovalForAll(address,address,bool)': TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    'EventCreated(uint256,string,address,uint256,uint256)': TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    'EventDeactivated(uint256)': TypedContractEvent<
      EventDeactivatedEvent.InputTuple,
      EventDeactivatedEvent.OutputTuple,
      EventDeactivatedEvent.OutputObject
    >;
    EventDeactivated: TypedContractEvent<
      EventDeactivatedEvent.InputTuple,
      EventDeactivatedEvent.OutputTuple,
      EventDeactivatedEvent.OutputObject
    >;

    'MetadataUpdate(uint256)': TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'RoyaltyPaid(uint256,address,uint256)': TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;
    RoyaltyPaid: TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;

    'TicketMinted(uint256,uint256,address,uint256)': TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
